@{
    Layout = "~/_Layout.cshtml";
    Page.Title = string.Format("Razor - {0}", "CRUD-Insert-with-Validation");

    //consider your need for global variables
    var title = "";
    var artist = "";
    var year = "";
    var label = "";


    //obtain two lists: SupplierList and CategoryList
    var db = Database.Open("CHINOOK");

    var artistquery = @"SELECT ArtistId, Name FROM Artists Order by Name";
    var artistrecords = db.Query(artistquery);
    List<SelectListItem> artistitems = new List<SelectListItem>();
    artistitems.Add(new SelectListItem
    {
        Value = "0",
        Text = "select..."
    });
    foreach (var record in artistrecords)
    {
        artistitems.Add(new SelectListItem
        {
            Value = record.ArtistId.ToString(),
            Text = record.Name
        });
    }

    var albumquery = @"SELECT AlbumId, Title FROM Albums Order by Title";
    var albumrecords = db.Query(albumquery);
    List<SelectListItem> albumitems = new List<SelectListItem>();
    albumitems.Add(new SelectListItem
    {
        Value = "0",
        Text = "select..."
    });
    foreach (var record in albumrecords)
    {
        albumitems.Add(new SelectListItem
        {
            Value = record.AlbumId.ToString(),
            Text = record.Title
        });
    }

    var yearquery = @"SELECT ReleaseYear FROM Albums Order by ReleaseYear";
    var yearrecords = db.Query(yearquery);
    List<SelectListItem> yearitems = new List<SelectListItem>();
    yearitems.Add(new SelectListItem
    {
        Value = "0",
        Text = "select..."
    });
    foreach (var record in yearrecords)
    {
        yearitems.Add(new SelectListItem
        {
            Value = record.ReleaseYear.ToString(),
            Text = record.ReleaseYear
        });
    }


    var labelquery = @"SELECT ReleaseLabel, Title FROM Albums Order by ReleaseLabel";
    var labelrecords = db.Query(labelquery);
    List<SelectListItem> labelitems = new List<SelectListItem>();
    labelitems.Add(new SelectListItem
    {
        Value = "0",
        Text = "select..."
    });
    foreach (var record in labelrecords)
    {
        labelitems.Add(new SelectListItem
        {
            Value = record.ReleaseLabel.ToString(),
            Text = record.ReleaseLabel
        });
    }

    //these are validator controls that execute on the server side

    Validation.Add("Title",
Validator.Required("Title is required"),
Validator.StringLength(160, 1, "Limited to 160 characters"));

    Validation.Add("ArtistId",
          Validator.Range(1, 275));

    //QuantityPerUnit is nullable which means 0 required characters
    Validation.Add("ReleaseYear",
        Validator.Required("Year is out of range, 1950 to today"),
         Validator.StringLength(DateTime.Today.Year));

    Validation.Add("ReleaseLabel",
        Validator.StringLength(50, 1, "Label is limited to 50 characters"));

            }

            @section head{
    <link href="~/Content/MyCssCopy.css" rel="stylesheet" />
}

            @section banner{
    <h1>@Page.Title</h1>
}

            @if (IsPost)
            {
                // retreive the data from the form
                title = Request.Form["Title"];
                artist = Request.Form["ArtistId"];
                year = Request.Form["ReleaseYear"];
                label = Request.Form["ReleaseLabel"];

                var thebutton = Request.Form["FormButton"];

                if (thebutton.Equals("Clear"))
                {
                    title = "";
                    artist = "0";
                    year = "";
                    label = "";

                }
                else
                {
                    //Validation of data
                    //Validation.IsValid() is used to execute the server side validation
                    //the if statement DOES NOT need an else as the Validation control
                    //message will appear in your Summary() or Message() controls
                    if (Validation.IsValid())  //good data
                    {
                        try
                        {
                            var inscommand = @"INSERT INTO Albums (Title, ArtistId, ReleasedYear, ReleaseLabel)
                            VALUES(@0, @1, @2, @3)";
                            db.Execute(inscommand, title,
                                artist.Equals("0") ? null : artist,
                                string.IsNullOrEmpty(title) ? null : title,
                                string.IsNullOrEmpty(year) ? null : year,                               
                                string.IsNullOrEmpty(label) ? null : label);
                <div class="col-12 text-center">
                    <p style="color:green">
                        Product has been added
                    </p>
                </div>
            }
            catch (Exception ex)
            {
                <div class="col-12 text-center">
                    <p style="color:firebrick; font-size:large">
                        Processing error: @ex.Message
                    </p>
                </div>
            }
        }
    }
}
else
{

}

<fieldset>
    <legend>Web Pages with Validation</legend>
    <form id="theform" method="post">
        <div class="row offset-1">
            <label class="label" for="Title">Title:</label>&nbsp;&nbsp;
            @*<span><input name="Title" type="text" value="@title" class="@Validation.ClassFor("Title")"/></span>*@
            <span>@Html.TextBox("Title", title)</span>
            @Html.ValidationMessage("Title")
        </div>
        <div class="row offset-1">
            <label class="label" for="ArtistId">Artist:</label>&nbsp;&nbsp;
            <span>@Html.DropDownList("ArtistId", artistitems)</span>
            @Html.ValidationMessage("ArtistId")
        </div>
        <div class="row offset-1">
            <label class="label" for="ReleaseYear">Release Year:</label>&nbsp;&nbsp;
            <span>@Html.TextBox("ReleaseYear", yearitems)</span>
            @Html.ValidationMessage("ReleaseYear")
        </div>
        <div class="row offset-1">
            <label class="label" for="ReleaseLabel">Release Label:</label>&nbsp;&nbsp;
            <span>@Html.TextBox("ReleaseLabel", labelitems)</span>
            @Html.ValidationMessage("ReleaseLabel")
        </div>
        
        <div class="row offset-1">
            <button type="submit" id="FormButton" name="FormButton"
                    class="btn btn-primary" value="Add">
                Add
            </button>
            <button type="submit" id="FormButton" name="FormButton" formnovalidate
                    class="btn" value="Clear">
                Clear
            </button>
        </div>
    </form>
</fieldset>
@Html.ValidationSummary()