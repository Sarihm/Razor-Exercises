@{
    Layout = "~/_Layout.cshtml";
    Page.Title = string.Format("Razor - {0}", "CRUD - Update/Discontinue/Delete with Validation");

    var pid = Request.QueryString["pid"];
    if (pid.IsEmpty())
    {
        Response.Redirect("Exercise04a.cshtml");
    }
    var album = Request.Form["Album"];
    var title = Request.Form["Title"];
    var artist = Request.Form["Artist"];
    var year = Request.Form["Year"];
    var label = Request.Form["Label"];
    var discontinued = Request.Form["Discontinued"];
    var thebutton = Request.Form["theButton"];

    var message = "";

    //these are validator controls execute on the server side

    // ---------------------   Validations ------------------------------

    Validation.Add("AlbumId",
         Validator.Range(1, 275));

    Validation.Add("Title",
         Validator.Required("Title is required"),
         Validator.StringLength(160, 1, "Title is limited to 160 characters"));

    Validation.Add("ArtistId",
         Validator.Range(1, 275));

    Validation.Add("ReleaseYear",
        Validator.Required("Year is out of range, 1950 to today"),
         Validator.StringLength(DateTime.Today.Year));

    Validation.Add("ReleaseLabel",
        Validator.StringLength(50, 1, "Label is limited to 50 characters"));


    // ---------------------   database selects ------------------------------
    if (IsPost)
    {
        //discontinued is a checkbox
        //the possible values from the check box is null (not checked) or "on" (checked)
        //the acceptable sql values for a bit are 0 and 1
        if (discontinued == null)
        {
            discontinued = "0";
        }
        else
        {
            discontinued = "1";
        }
    }
    else
    {
        album = pid;
        discontinued = "0";
    }
    var db = Database.Open("CHINOOK");

    var titleStatement = "SELECT AlbumId, Title "
                        + "FROM Albums "
                        + "ORDER BY Title";
    var querytitle = db.Query(titleStatement);

    var artistStatement = "SELECT ArtistId, Name "
                        + "FROM Artists "
                        + "ORDER BY Name";
    var queryartist = db.Query(artistStatement);


    var queryStatement = "SELECT AlbumID, Title, ArtistId, "
                        + "ReleaseLabel, ReleaseYear "
                        + "FROM Albums "
                        + "WHERE AlbumId = @0";
    var queryProducts = db.QuerySingle(queryStatement, pid);
    if (queryProducts == null)
    {
        message = "Product NOT found";
    }
}

@section head{
    @*<link href="~/Content/MyCssCopy.css" rel="stylesheet" />*@
}

@section banner{
    <h1>@Page.Title</h1>
}

@if (IsPost)
{
    if (thebutton.Equals("backtosearch"))
    {
        Response.Redirect("Exercise04a.cshtml");
    }

    if (Validation.IsValid())
    {
        try
        {
            if (thebutton.Equals("discontinue"))
            {
                var sqlcommand = "UPDATE Products SET "
                                + "Discontinued = 1 "
                                + "WHERE ProductID = @0";
                var rowsaffected = db.Execute(sqlcommand, title);
                if (rowsaffected > 0)
                {
                    discontinued = "1";
                    message = "Product has been DISCONTINUED";
                }
                else
                {
                    message = "Product NOT found";
                }
            }
            else if (thebutton.Equals("update"))
            {
                var sqlcommand = "UPDATE Albums SET "
                                + "Title = @0, "
                                + "ArtistId = @1, "
                                + "ReleaseYear = @2, "
                                + "ReleaseLabel = @3, "
                                + "WHERE AlbumId = @4";
                var rowsaffected = db.Execute(sqlcommand, title,
                    year.Equals("0") ? null : year,
                    label.Equals("0") ? null : label,
                    string.IsNullOrEmpty(title) ? null : title,
                    string.IsNullOrEmpty(artist) ? null : artist);

                if (rowsaffected > 0)
                {
                    message = "Album has been UPDATED";
                }
                else
                {
                    message = "Album NOT found";
                }
            }
            else if (thebutton.Equals("delete"))
            {
                var deleteStatement = "Delete Products WHERE AlbumId = @0";

                var rows = db.Execute(deleteStatement, album);
                if (rows == 1)
                {
                    message = "Album has been DELETED";
                }
                else
                {
                    message = "Album NOT found";
                }

                album = "";
                artist = "";
                title = "";
                year = "0";
                label = "";
            }
        }
        catch (Exception ex)
        {
            <div class="col-12 text-center">
                <p style="color:firebrick; font-size:large">
                    Processing error: @ex.Message
                </p>
            </div>
        }
    }
}
else //IsPost=false
{
    if (message != "Product NOT found")
    {
        album = queryProducts.AlbumId.ToString();
        title = queryProducts.Title;
        artist = queryProducts.ArtistId == null ? "0" : queryProducts.ArtistId.ToString();
        year = queryProducts.ReleaseYear == null ? "0" : queryProducts.ReleaseYear.ToString();
        label = queryProducts.ReleaseLabel == null ? "0" : queryProducts.ReleaseLabel.ToString();
    }

}
@Html.ValidationSummary()

<div class="col-12 text-center">
    <p style="color:green">
        @message
    </p>
</div>

<form id="theForm" action="" method="post">
    <div class="row row-cols-2">

        <div class="col text-right">
            <label id="lblAlbum" for="Album">Album ID</label>
        </div>
        <div class="col text-left">
            <input type="number" name="Album" value="@album" readonly />
        </div><br />

        <div class="col text-right">
            <label id="lblTitle" for="Title">Title</label>
        </div>
        <div class="col text-left">
            <input type="text" name="Title" value="@title" />
        </div><br />
        <div class="col text-right">
            <label id="lblArtist" for="Artist">Artist</label>
        </div>
        <div class="col text-left">
            <input type="text" name="Artist" value="@artist" />
        </div><br />

    </div>
    <div class="row">
        <div class="col-12 text-center">
            <button type="submit" name="theButton" id="theUpdate" class="btn btn-primary"
                    value="update">
                Update
            </button>&nbsp;&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theDiscontinue" class="btn btn-primary" formnovalidate
                    value="discontinue">
                Discontinue
            </button>&nbsp;&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theDelete" class="btn btn-primary" formnovalidate
                    value="delete">
                Delete Record
            </button>&nbsp;&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theCancel" class="btn btn-primary" formnovalidate
                    value="backtosearch">
                Back to Search
            </button>
        </div>
    </div>

    @* confirmation can be done on a button click using javascript
        we will ask the user to confirm the discontinuing of a product*@
    <script type="text/javascript">
        document.getElementById("theDiscontinue").onclick = ConfirmDiscontinue;
        function ConfirmDiscontinue() {
            return confirm("Are you sure you want to DISCONTINUE @title?");
        }
        document.getElementById("theDelete").onclick = ConfirmDelete;
        function ConfirmDelete() {
            return confirm("Are you sure you want to DELETE @title?");
        }
    </script>
</form>

